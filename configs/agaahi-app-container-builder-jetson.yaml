# Container dockerfile Stage build section
---
unique_stage: final_image
base_image: "nvcr.io/nvidia/deepstream:6.4-triton-multiarch"
stage_model: clean_stage

local_copy_files:
  # copy graph composer to run graph composer app with gxf_server
- src: "/opt/nvidia/graph-composer/graph-composer-3.1.0_arm64.deb"
  dst: "/tmp/"
  # copy entire application into deepstream directory, including graph yaml and parameters
- src: "/opt/nvidia/deepstream/deepstream-6.4/sources/apps/composer_apps/deepstream-agaahi-app/"
  dst: "/opt/nvidia/deepstream/deepstream-6.4/sources/apps/composer_apps/deepstream-agaahi-app/"

# install graph composer
custom_runs:
 - "apt install -y /tmp/graph_composer-3.1.1_arm64.deb && rm -rf /tmp/graph_composer-3.1.0_arm64.deb"

# working directory
work_folder: "/opt/nvidia/deepstream/deepstream-6.4/sources/apps/composer_apps/deepstream-agaahi-app"

# environment variables
env_list:
  PATH: "/opt/nvidia/graph-composer/:$PATH"
  LD_LIBRARY_PATH: "/opt/nvidia/graph-composer/:$LD_LIBRARY_PATH"
  DISPLAY: ":0"

# set platform for jetson
platform: linux/arm64

# set up entry point of app
entrypoint:
- "gxe"
- "--app"
- "/opt/nvidia/deepstream/deepstream-6.4/sources/apps/composer_apps/deepstream-agaahi-app/deepstream-agaahi-app.yaml,/opt/nvidia/deepstream/deepstream-6.4/sources/apps/composer_apps/deepstream-agaahi-app/deepstream-agaahi-app.parameters.yaml"
